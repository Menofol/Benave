const { SlashCommandBuilder, PermissionFlagsBits, ChannelType, EmbedBuilder } = require("discord.js")
const moderationSchema = require("../../schemas/moderation");
const mConfig = require("../../messageConfig.json");

module.exports = {
    data: new SlashCommandBuilder()
        .setName("moderatesystem")
        .setDescription("–°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.")
        .addSubcommand((s) => s
            .setName("configure")
            .setDescription("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
            .addChannelOption((o) => o
                .setName("logging_channel")
                .setDescription("–ö–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è.")
                .setRequired(true)
                .addChannelTypes(ChannelType.GuildText)
                )
            )
            .addSubcommand((s) => s
                .setName("remove")
                .setDescription("–£–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.")
                )
                .toJSON()
            ,
            userPermissions: [PermissionFlagsBits.Administrator],
            botPermissions: [],

            run: async (client, interaction) => {
                const { options, guildId, guild } = interaction;
                const subcmd = options.getSubcommand();
                if (!["configure", "romove"].includes(subcmd)) return;

                const rEmbed = new EmbedBuilder()
                    .setFooter({
                        iconURL: `${client.user.displayAvatarURL({ dynamic: true })}`,
                        text: `${client.user.username} - –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è`
                    });
                
                switch (subcmd) {
                    case "configure":
                        const loggingChannel = options.getChannel("logging_channel");

                        let dataGD = await moderationSchema.findOne({ GuildID: guildId });
                        if (!dataGD) {
                            rEmbed
                                .setColor(mConfig.embedColorWarning)
                                .setDescription(`\`‚è≥\` –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä: –ù–∞—á–∞—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ...`);
                            
                            await interaction.reply({ embeds: [rEmbed], fetchReply: true, ephermeral: true });

                            dataGD = new moderationSchema({
                                GuildID: guildId,
                                LogChannelID: loggingChannel.ig
                            });
                            dataGD.save();

                            rEmbed
                                .setColor(mConfig.embedColorSucces)
                                .setDescription(`\`‚úÖ\` –£—Å–ø–µ—à–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ.`)
                                .addFields(
                                    { name: "Logging channel", value: `${loggingChannel}`, inline: true }
                                );

                            setTimeout(() => {
                                interaction.editReply({ embeds: [rEmbed], ephermeral: true });
                            }, 2_000);
                        } else {
                            await moderationSchema.findOneAndUpdate({ GuildID: guild}, { LogChannelID: loggingChannel.id });

                            rEmbed
                                .setColor(mConfig.embedColorSucces)
                                .setDescription(`\`‚úÖ\` –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ–Ω—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∞ –¥–∞–Ω–Ω—ã–µ.`)
                                .addFields(
                                    { name: "–ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤", value: `${loggingChannel}`, inline: true }
                                );

                                interaction.reply({ embeds: [rEmbed], ephermeral: true });
                        };
                        break;
                    case "remove":
                        const removed = await moderationSchema.findOneAndDelete({ GuildID: guildId });
                        if(remove) {
                            rEmbed
                                .setColor(mConfig.embedColorSucces)
                                .setDescription(`\`‚úÖ\` –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ–Ω—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.`)
                        } else {
                            rEmbed
                                .setColor(mConfig.embedColorError)
                                .setDescription(`\`‚ùå\` –°–∏—Å—Ç–µ–º–∞ –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–∞.\n\n\`üí°\` –ò—Å–ø–æ–ª—å–∑—É–π \`/moderatesystem configure\` —á—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É.`);
                        }
                        interaction.reply({ embeds: [rEmbed], ephermeral: true });
                        break;                
                    };
            },
};